/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/


#define COMBO_LAYER(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <45>; \
};
#define COMBO_ANY(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    timeout-ms = <45>; \
};

/*       KEY POSITIONS for Corne-ish Zen
     ╭─────────────────────╮ ╭─────────────────────╮
  0  │   1   2   3   4  5  │ │  6   7   8   9  10  │ 11
 12  │  13  14  15  16  17 | | 18  19  20  21  22  │ 23
 24  │  25  26  27  28  29 │ │ 30  31  32  33  34  │ 35
     ╰────────╮ 36  37  38 │ │ 39  40  41 ╭────────╯
              ╰────────────╯ ╰────────────╯   */
/*    KEY POSITION Names
     ╭─────────────────────╮ ╭─────────────────────╮
LT5  │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │ RT5
LM5  │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │ RM5
LB5  │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │ RB5
     ╰───────╮ LH3 LH2 LH1 | | RH1 RH2 RH3 ╭───────╯
             ╰─────────────╯ ╰─────────────╯
*/

combos {
    compatible = "zmk,combos";

//
// control/modes
//
COMBO_ANY(settings, &mo l_cfg,  RH1 RH2) // get the settings/media layer from anywhere
COMBO_ANY(appswitch, &AppSwitch, LT1 LT0) // App switch
COMBO_LAYER(docaps, &caps_word, LM2 LM1 RM1 RM2, l_alpha) // CAPSWORD
COMBO_LAYER(capslk, &kp CAPS, LM3 LM2 RM2 RM3, l_alpha) // CAPS LOCK

//
// Editing actions (&whitespace)
//
COMBO_ANY(Gent, &kp LC(RETURN), LB2 LB1 LB0)
COMBO_ANY(entr, &kp RETURN,     LB1 LB0)
COMBO_ANY(tab,  &kp TAB,        LM3 LM2)
COMBO_ANY(stab, &kp LS(TAB),    LT4 LT3 LT2)
COMBO_ANY(spce, &kp SPACE,      LM1 LM0)
COMBO_ANY(esc,  &kp ESC,        LM4 LM1)
COMBO_ANY(sall, &kp LC(A),      LB4 LB1)
COMBO_LAYER(selword, &m_selword,  LB4 LB0, l_alpha)
COMBO_ANY(undo, &kp LC(Z),      LB4 LB3)
COMBO_ANY(redo, &kp LC(LS(Z)),  LB4 LB3 LB2)
COMBO_ANY(copy, &lk LC(X) LC(C), LB3 LB2)
COMBO_ANY(pste, &lk LC(LS(LA(V))) LC(V), LB2 LB1)
COMBO_LAYER(cloz, &kp LC(W),      LM3 LB3, l_alpha)
COMBO_LAYER(new,  &kp LC(N),      LM2 LB2, l_alpha)
COMBO_LAYER(open, &kp LC(O),      LM1 LB1, l_alpha)
COMBO_LAYER(quit, &kp LC(Q),      LM0 LB0, l_alpha)
COMBO_LAYER(findsel, &m_findsel,  LM4 LB0, l_alpha)
COMBO_LAYER(prntsel, &kp LA(PRINTSCREEN), LT3 LT2 LT1, l_alpha)

//
// type a glyph (tiny board accommodation)
//
COMBO_LAYER(typeQ, &lk_qu Q U,      LT3 LT1, l_alpha)
COMBO_LAYER(typeZ, &kp Z,           LM3 LM1, l_alpha)
COMBO_LAYER(typeColn, &lk LA(SEMI) COLON,    RT1 RT3, l_alpha)
COMBO_LAYER(typeSemi, &kp SEMI,     RM0 RM1, l_alpha)
COMBO_LAYER(typeExcl, &kp EXCL,     RT1 RT2, l_alpha)
COMBO_LAYER(typeQues, &kp QMARK,    RT2 RT3, l_alpha)
COMBO_LAYER(typeGrav, &kp GRAVE,    RT3 RT4, l_alpha)
COMBO_LAYER(typeatMk, &lk LS(LA(SEMI)) AT_SIGN,  RT0 RT1, l_alpha) // @ (№ if held)
COMBO_LAYER(typeUnder, &kp UNDER,   RB1 RB3, l_alpha) // _
COMBO_LAYER(typeEqual, &lk PRCNT EQUAL,   RB2 RB3, l_alpha) // = (percent if held)
COMBO_LAYER(typeTilde, &kp TILDE,   RB1 RB4, l_alpha) // tilde (not dead key)
COMBO_LAYER(typePipe, &kp PIPE, RB1 RB2, l_alpha) // |

//
// H Digraphs REQUIRE macros (defined earlier) to process
//
COMBO_LAYER(sch, &Sch,  LM4  LM3 LM2, l_alpha) // Sch
COMBO_LAYER(tch, &Tch,  LM4  LM3 LM1, l_alpha) // Tch

#ifdef EN_PRONOUN_COMBOS
//
// Pronoun combos REQUIRE macros to process
//

COMBO_LAYER(pnI, &typePnI,          RM3 RM4, l_alpha) // "I "

COMBO_LAYER(pnIm, &typePnIm,        RM3 LT2, l_alpha) // "I'm "
COMBO_LAYER(pnIll, &typePnIll,      RM3 LB2, l_alpha) // "I'll "
COMBO_LAYER(pnId, &typePnId,        RM3 LB1, l_alpha) // "I'd "
COMBO_LAYER(pnIve, &typePnIve,      RM3 LB0, l_alpha) // "I've "

COMBO_LAYER(pnYour,  &typePnYour,   RB3 LH1, l_alpha) // "Your "
COMBO_LAYER(pnYoure, &typePnYoure,  RB3 LB3, l_alpha) // "You're "
COMBO_LAYER(pnYoull, &typePnYoull,  RB3 LB2, l_alpha) // "You'll "
COMBO_LAYER(pnYoud, &typePnYoud,    RB3 LB1, l_alpha) // "You'd "
COMBO_LAYER(pnYouve, &typePnYouve,  RB3 LB0, l_alpha) // "You've "

COMBO_LAYER(pnWere, &typePnWere,    LT4 LH1, l_alpha) // "We're "
COMBO_LAYER(pnWell, &typePnWell,    LT4 LT2, l_alpha) // "We'll "
COMBO_LAYER(pnWed, &typePnWed,      LT4 LT1, l_alpha) // "We'd "
COMBO_LAYER(pnWeve, &typePnWeve,    LT4 LT0, l_alpha) // "We've "

#endif // EN_PRONOUN_COMBOS

/* numpad symbol combos */

COMBO_LAYER(numLPRN, &kp LPAR,      RM1 RM2, l_num)
COMBO_LAYER(numRPRN, &kp RPAR,      RM2 RM3, l_num)
COMBO_LAYER(numEQUAL, &kp EQUAL,    RM3 RM4, l_num)
COMBO_LAYER(numCOLN, &kp COLON,     RM1 RM3, l_num)
COMBO_LAYER(numPRCNT, &kp PRCNT,    RB2 RB3, l_num)
COMBO_LAYER(numLT, &kp LT,          RM0 RM1, l_num)
COMBO_LAYER(numGT, &kp GT,          RM0 RM4, l_num)
COMBO_LAYER(numDASH, &kp LA(MINUS), RB0 RB1, l_num)
COMBO_LAYER(numTILD, &kp TILDE,     RB0 RB4, l_num)
COMBO_LAYER(numELIP, &kp LA(SEMI),  RB1 RB4, l_num)
COMBO_LAYER(numENT, &kp KP_ENTER,   RB3 RB4, l_num)

COMBO_LAYER(numDLLR, &kp DLLR,       RT1 RT2, l_num) // $
COMBO_LAYER(numCENT, &kp LA(N4),     RT0 RT1, l_num) // ¢
COMBO_LAYER(numEURO, &kp LS(LA(N2)), RT2 RT3, l_num) // €
COMBO_LAYER(numYEN, &kp LA(Y),       RT3 RT4, l_num) // ¥
COMBO_LAYER(numBPND, &kp LA(N3),     RT1 RT3, l_num) // £

};
